# === üõ†Ô∏è Import Libraries ===
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.edge.options import Options as EdgeOptions
from webdriver_manager.microsoft import EdgeChromiumDriverManager
import time
import os
import shutil
from datetime import datetime

# === üßæ Credentials ‡πÅ‡∏•‡∏∞ URLs ===
"username": "your_username_here",  # ‚Üê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
"password": "your_password_here",  # ‚Üê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
LOGIN_URL = "http://nmsgov.ntcsoc.net/Orion/Login.aspx"
REPORT_URL = "http://nmsgov.ntcsoc.net/Orion/reports/viewreports.aspx"

# === üì• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ===
DOWNLOAD_DIR = os.path.join(os.path.expanduser("~"), "Downloads", "temp_downloads")
TARGET_DIR = r"C:\Users\‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà\‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏át\Report"

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge Driver ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
edge_driver_path = r"C:\Users\‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà\‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á\msedgedriver.exe"

# === üìú ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Log ‡πÉ‡∏ô Console ===
def log(text):
    print(text)
    sys.stdout.flush()

# === ‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ===
def start_download():
    log("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")

    start_time = time.time()
    success_count = 0
    fail_count = 0
    failed_reports = []
    driver = None

    try:
        # ‚úÖ ‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô
        if os.path.exists(DOWNLOAD_DIR):
            shutil.rmtree(DOWNLOAD_DIR)
            #log(f"üìÅ ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤: {DOWNLOAD_DIR}")
        os.makedirs(DOWNLOAD_DIR)
        #log(f"üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {DOWNLOAD_DIR}")
        
        if not os.path.exists(TARGET_DIR):
            os.makedirs(TARGET_DIR)
            #log(f"üìÇ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {TARGET_DIR}")

        # === ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Edge Options ===
        edge_options = EdgeOptions()
        edge_options.add_argument("--start-maximized")
        edge_options.add_argument("--no-sandbox")
        edge_options.add_argument("--disable-web-security")
        edge_options.add_argument("--ignore-certificate-errors")
        edge_options.add_argument("--disable-infobars")
        edge_options.add_argument("--headless=new")
        
        prefs = {
            "download.default_directory": DOWNLOAD_DIR,
            "download.prompt_for_download": False,
            "safebrowsing.enabled": False,
            "safebrowsing.disable_download_protection": True,
            "download.directory_upgrade": True,
        }
        edge_options.add_experimental_option("prefs", prefs)

        # ‚úÖ ‡∏•‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Driver ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô
        log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Edge Driver ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
        try:
            service = EdgeService(EdgeChromiumDriverManager().install())
            driver = webdriver.Edge(service=service, options=edge_options)
            log("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Edge Browser ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
        except Exception as e:
            #log(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Driver ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô
            #log(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Driver ‡∏à‡∏≤‡∏Å Path: {edge_driver_path}")
            service = EdgeService(edge_driver_path)
            driver = webdriver.Edge(service=service, options=edge_options)
            #log("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Edge Browser ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á)")

        driver.implicitly_wait(10)

        # === üîê Login ‡∏î‡πâ‡∏ß‡∏¢ Selenium ===
        log("üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...")
        driver.get(LOGIN_URL)
        WebDriverWait(driver, 300).until(EC.presence_of_element_located((By.ID, "ctl00_BodyContent_Username")))

        driver.find_element(By.ID, "ctl00_BodyContent_Username").send_keys(USERNAME)
        driver.find_element(By.ID, "ctl00_BodyContent_Password").send_keys(PASSWORD)
        driver.find_element(By.ID, "ctl00_BodyContent_LoginButton").click()
        log("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # === üîÑ Loop ‡∏´‡∏ô‡πâ‡∏≤ Report ===
        driver.get(REPORT_URL)

        # üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        daily_folder_name = datetime.now().strftime("%d%m%Y")
        daily_target_dir = os.path.join(TARGET_DIR, daily_folder_name)
        if not os.path.exists(daily_target_dir):
            os.makedirs(daily_target_dir)
            log(f"üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {daily_folder_name}")

        while True:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            report_links = WebDriverWait(driver, 300).until(
                EC.presence_of_all_elements_located((By.XPATH, "//a[contains(@href, 'Report.aspx?ReportID=')]"))
            )
            if not report_links:
                break
            
            all_links = [(elem.get_attribute("href"), elem.text.strip()) for elem in report_links]
            log(f"üìÑ ‡∏û‡∏ö {len(all_links)} ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")

            for href, name in all_links:
                retry = 0
                success = False
                while retry < 2 and not success:
                    try:
                        driver.get(href)
                        log(f"üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {name} (‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {retry+1})")
                        
                        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
                        WebDriverWait(driver, 300).until_not(
                            EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Your requested report')]"))
                        )
                        log("‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß")

                        # ‡∏£‡∏≠‡∏õ‡∏∏‡πà‡∏° Export to Excel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                        export_btn = WebDriverWait(driver, 300).until(
                            EC.element_to_be_clickable((By.LINK_TEXT, "Export to Excel"))
                        )
                        export_btn.click()
                        log("üì• ‡∏Ñ‡∏•‡∏¥‡∏Å Export ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        
                        # === ‡∏£‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ===
                        download_complete = False
                        start_download_time = time.time()
                        last_size = -1
                        stagnant_time = 0

                        while not download_complete and (time.time() - start_download_time < 900):
                            files = [f for f in os.listdir(DOWNLOAD_DIR) if not f.endswith('.tmp') and not f.endswith('.crdownload')]
                            if files:
                                latest_file = max(
                                    [os.path.join(DOWNLOAD_DIR, f) for f in files],
                                    key=os.path.getctime
                                )
                                current_size = os.path.getsize(latest_file)
                                if current_size == last_size:
                                    stagnant_time += 1
                                else:
                                    stagnant_time = 0
                                    last_size = current_size

                                if stagnant_time >= 3:
                                    log("‚ùó ‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á")
                                    break
                                
                                if not latest_file.endswith('.crdownload') and current_size > 0:
                                    download_complete = True
                                    break
                            time.sleep(2)
                        
                        if download_complete:
                            file_ext = os.path.splitext(latest_file)[1]
                            timestamp = datetime.now().strftime("%d%m%Y")
                            new_name = f"{timestamp}_{name.replace(' ', '_').replace('/', '-')}{file_ext}"
                            
                            # üÜï ‡πÉ‡∏ä‡πâ daily_target_dir ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                            shutil.move(latest_file, os.path.join(daily_target_dir, new_name))
                            log(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {new_name}")
                            success_count += 1
                            success = True
                        else:
                            raise Exception("‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                            
                    except Exception as e:
                        retry += 1
                        log(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {retry}: {name} -> {e}")
                        if retry >= 2:
                            fail_count += 1
                            failed_reports.append(name)
                    finally:
                        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                        driver.get(REPORT_URL)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏° Next
            try:
                next_btn = driver.find_element(By.LINK_TEXT, "Next")
                next_btn.click()
                time.sleep(2)
            except:
                break

    except Exception as e:
        log(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")

    finally:
        if driver:
            driver.quit()
        log("üö™ ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå")
        log(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:")
        log(f"‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        log(f"‚ùå ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {fail_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        if failed_reports:
            log("üõë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:")
            for r in failed_reports:
                log(f" - {r}")
        log(f"‚è∞ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {round(time.time() - start_time)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

start_download()

